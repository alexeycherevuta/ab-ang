@mixin flexbox() {
	display: -webkit-box;      /* OLD - iOS 6-, Safari 3.1-6 */
  	display: -moz-box;         /* OLD - Firefox 19- (buggy but mostly works) */
  	display: -ms-flexbox;      /* TWEENER - IE 10 */
  	display: -webkit-flex;     /* NEW - Chrome */
  	display: flex; 
}
@mixin flexbox-orient-hor() {
    -webkit-box-orient: horizontal;
    -moz-box-orient: horizontal;
    -ms-box-orient: horizontal;
     box-orient: horizontal;     
	-ms-flex-direction: row;
}
@mixin flexbox-orient-ver() {
    -webkit-box-orient: vertical;
    -moz-box-orient: vertical;
    -ms-box-orient: vertical;
     box-orient: vertical;
}
@mixin flexbox-order($order) {
	-webkit-box-ordinal-group: $order;  
    -moz-box-ordinal-group: $order;      
    -ms-flex-order: $order;             
    -webkit-order: $order;               
    order: $order;  
}
@mixin flexbox-flex($flex) {
	/* previous syntax */
    -webkit-box-flex: $flex;
       -moz-box-flex: $flex;
        -ms-box-flex: $flex;
            box-flex: $flex;
    /* current syntax */
    -webkit-flex: $flex;
       -moz-flex: $flex;
        -ms-flex: $flex;
            flex: $flex;
}
@mixin flexbox-flow($flow) {
	/* previous syntax */
    -webkit-box-flow: $flow;
       -moz-box-flow: $flow;
        -ms-box-flow: $flow;
            box-flow: $flow;
    /* current syntax */
    -webkit-flow: $flow;
       -moz-flow: $flow;
        -ms-flow: $flow;
            flow: $flow;
}
@mixin flexbox-wrap($wrap) {
	/* previous syntax */
    -webkit-box-wrap: $wrap;
       -moz-box-wrap: $wrap;
        -ms-box-wrap: $wrap;
            box-wrap: $wrap;
    /* current syntax */
    -webkit-wrap: $wrap;
       -moz-wrap: $wrap;
        -ms-wrap: $wrap;
            wrap: $wrap;
}
@mixin flexbox-direction($dir) {
	-ms-flex-direction: $dir;
	-moz-flex-direction: $dir;
	flex-direction: $dir;
	-webkit-flex-direction: $dir;
} 
@mixin flexbox-justify-content($value) {
	 -webkit-justify-content: $value;
        -moz-justify-content: $value;
         -ms-justify-content: $value;
             justify-content: $value;	
}
@mixin flexbox-align-items($value) {
     -webkit-align-items: $value;
        -moz-align-items: $value;
         -ms-align-items: $value;
             align-items: $value;   
}
@mixin clearfix() {
	&:before, 
	&:after {
		content: " "; // 1
		display: table; // 2
	}
	&:after {
		clear: both;
	}
}
@mixin vertical-horizontal-center {
    position: absolute;
    top: 50%;
    left: 50%;
    @include transform(translate(-50%, -50%));
}
@mixin vertical-center {
    position: absolute;
    top: 50%;
    @include transform(translate(-50%));
}
@mixin vertical-bottom {
    position: absolute;
    top: 100%;
    @include transform(translate(-100%));
}
@mixin vertical-horizontal-center-flexbox {
    @include flexbox();
    @include flexbox-justify-content(center);
    @include flexbox-align-items(center);
    text-align: center;
    vertical-align: middle;
}
@mixin no-whitespace() {
	white-space: -moz-pre-wrap; /* Firefox */
	white-space: -o-pre-wrap; /* Opera */
	white-space: pre-wrap; /* Chrome */
	word-wrap: break-word; /* IE */
}
@mixin text-gradient($gradient) {
	background: -webkit-linear-gradient(#{$gradient});
	background: linear-gradient(#{$gradient});
	background-clip: text;
    text-fill-color: transparent;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    @include hack-ie8-11 {
    	background: transparent;    	
    }
}
@mixin make-full-height() {
    position: relative;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    width: 100%;
    height: 100%;
}
@mixin vertical-middle($position: absolute) {
	position: #{$position};
	top: 50%;
	-webkit-transform: translateY(-50%);
	-ms-transform: translateY(-50%);
	transform: translateY(-50%);
}
@mixin opacity($value, $important: '') {
	opacity: $value #{$important};
	filter: alpha(opacity=#{$value * 100}) #{$important};
}
@mixin border-radius($radius, $important: '') {
	-webkit-border-radius: $radius#{$important};
	-moz-border-radius: $radius#{$important};
	-ms-border-radius: $radius#{$important};
	-o-border-radius: $radius#{$important};
	border-radius: $radius#{$important};
}
@mixin border-top-left-radius($radius, $important: '') {
    -webkit-border-top-left-radius: $radius#{$important};
    -moz-border-top-left-radius: $radius#{$important};
    -ms-border-top-left-radius: $radius#{$important};
    -o-border-top-left-radius: $radius#{$important};
    border-top-left-radius: $radius#{$important};
}
@mixin border-top-right-radius($radius, $important: '') {
    -webkit-border-top-right-radius: $radius#{$important};
    -moz-border-top-right-radius: $radius#{$important};
    -ms-border-top-right-radius: $radius#{$important};
    -o-border-top-right-radius: $radius#{$important};
    border-top-right-radius: $radius#{$important};
}
@mixin border-bottom-left-radius($radius, $important: '') {
    -webkit-border-bottom-left-radius: $radius#{$important};
    -moz-border-bottom-left-radius: $radius#{$important};
    -ms-border-bottom-left-radius: $radius#{$important};
    -o-border-bottom-left-radius: $radius#{$important};
    border-bottom-left-radius: $radius#{$important};
}
@mixin border-bottom-right-radius($radius, $important: '') {
    -webkit-border-bottom-right-radius: $radius#{$important};
    -moz-border-bottom-right-radius: $radius#{$important};
    -ms-border-bottom-right-radius: $radius#{$important};
    -o-border-bottom-right-radius: $radius#{$important};
    border-bottom-right-radius: $radius#{$important};
}
@mixin input-placeholder($color: $input-color-placeholder) {
	&::-moz-placeholder {
		color: $color;
		opacity: 1;
	}
	&:-ms-input-placeholder {
		color: $color;
	}
	&::-webkit-input-placeholder {
		color: $color;
	}
}
@mixin input-autofill($color) {
    &:-webkit-autofill {
        -webkit-box-shadow: 0 0 0px 1000px $color inset !important;
        &:hover,
        &:focus {
           -webkit-box-shadow: 0 0 0px 1000px $color inset !important;
        }
    }
}
@mixin gradient-bg($alternative-bg, $degree, $from, $to) {
    background: $alternative-bg; /* For browsers that do not support gradients */
    background: -webkit-linear-gradient( $degree, $from, $to ); /* For Safari 5.1 to 6.0 */
    background: -o-linear-gradient( $degree, $from, $to ); /* For Opera 11.1 to 12.0 */
    background: -moz-linear-gradient( $degree, $from, $to ); /* For Firefox 3.6 to 15 */
    background: linear-gradient( $degree, $from, $to ); /* Standard syntax */    
}
@mixin reset-input() {
	border: 0;
	background: none;
	outline: none !important;
	@include shadow(none);
}
@mixin fix-fixed-position-lags() {
	-webkit-backface-visibility:hidden; 
	backface-visibility:hidden; 
}
@mixin fix-animation-lags() {
    @include transform(translateZ(0)); 
    -webkit-transform-style: preserve-3d;
}
@mixin fix-webkit-animation-font() {
   -webkit-transform-style: preserve-3d;
   -webkit-transform: translateZ(0px);
   -webkit-font-smoothing: subpixel-antialiased; 
   -webkit-backface-visibility:hidden;
}
@mixin shadow($shadow) {
	-webkit-box-shadow: #{$shadow}; // iOS <4.3 & Android <4.1
	-moz-box-shadow: #{$shadow};
	box-shadow: #{$shadow};
}
@mixin attr($attr, $value) {
    @if  $value != null  {
        #{$attr}: #{$value}; 
    } 
}
@mixin rounded {
  	@if $m--rounded == true {
    	@content;
  	}
}
@mixin transform($degree) {  
	-webkit-transform: #{$degree};
	-moz-transform:#{ $degree};
	-ms-transform: #{$degree};
	-o-transform: #{$degree};
	transform: #{$degree};
}
@mixin animation($animation) {
	-webkit-animation: #{$animation};
    -moz-animation: #{$animation};
    -ms-animation: #{$animation};
    -o-animation: #{$animation};
    animation: #{$animation};
}
@mixin animation-fill-mode($mode) {
	-webkit-animation-fill-mode: #{$mode};
    -moz-animation-fill-mode: #{$mode};
    -ms-animation-fill-mode: #{$mode};
    -o-animation-fill-mode: #{$mode};
    animation-fill-mode: #{$mode};
}
@mixin transition($transition) {
	-webkit-transition: #{$transition};
	-moz-transition: #{$transition};
	-ms-transition: #{$transition};
	-o-transition: #{$transition};
	transition: #{$transition};
}
@mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
        @content;
    }
    @-moz-keyframes #{$animationName} {
        @content;
    }
    @-o-keyframes #{$animationName} {
        @content;
    }
    @keyframes #{$animationName} {
        @content;
    }
}
/*
sm: 544px,
md: 768px,
lg: 992px,
xl: 1200px
*/
@mixin responsive-below($width) {
  	@media (max-width: #{$width}) {
    	@content;
  	}
}
@mixin responsive-above($width) {
  	@media (min-width: #{$width}) {
    	@content;
  	}
}
@mixin minimal-desktop {
 	@media (min-width: #{map-get($m--layout-breakpoints, lg)} + 1px) and (max-width: #{map-get($m--layout-breakpoints, xl)}) {
    	@content;
  	}
}
@mixin desktop {
  	@media (min-width: #{map-get($m--layout-breakpoints, lg)} + 1px) {
    	@content;
  	}
}
@mixin desktop-and-tablet {
  	@media (min-width: #{map-get($m--layout-breakpoints, md)} + 1px) {
    	@content;
  	}
}
@mixin tablet {
  	@media (min-width: #{map-get($m--layout-breakpoints, md)} + 1px) and (max-width: #{map-get($m--layout-breakpoints, lg)}) {
    	@content;
  	}
}
@mixin tablet-and-mobile {
  	@media (max-width: #{map-get($m--layout-breakpoints, lg)}) {
    	@content;
  	}
}
@mixin mobile {
  	@media (max-width: #{map-get($m--layout-breakpoints, md)}) {
    	@content;
  	}
} 
@mixin hack-ie8-11 {
	@media screen\0 {
		@content;
	}
}
@mixin hack-edge-all {
	@supports (-ms-ime-align:auto) {
		@content;
	}
}
@mixin component-skin($class, $skin) {
    @if $m--default-skin == $skin {
        .#{$class} {
            @content;
        }        
    } @else {
        .#{$class}.#{$class}--skin-#{$skin} {
            @content;
        }
    }
}
@mixin icons-size($config) {
    [class^="la-"], 
    [class*=" la-"] {
        font-size: array-get($config, lineawesome);
    } 
    [class^="fa-"], 
    [class*=" fa-"] {
        font-size: array-get($config, fontawesome);
    } 
    [class^="flaticon-"], 
    [class*=" flaticon-"] {
        font-size: array-get($config, metronic);
    }
}
@mixin icons-attr($attr, $config) {
    [class^="la-"], 
    [class*=" la-"] {
        #{$attr}: array-get($config, lineawesome);
    } 
    [class^="fa-"], 
    [class*=" fa-"] {
        #{$attr}: array-get($config, fontawesome);
    } 
    [class^="flaticon-"], 
    [class*=" flaticon-"] {
        #{$attr}: array-get($config, metronic);
    }
}
@mixin icons-style {
    [class^="la-"], 
    [class*=" la-"],
    [class^="fa-"], 
    [class*=" fa-"],
    [class^="flaticon-"], 
    [class*=" flaticon-"] {
        @content;
    } 
}
@mixin icon($default-state) {
    &:before {
        display: inline-block;
        font-family: "Metronic";
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        line-height: 0px;
        text-decoration: inherit;
        text-rendering: optimizeLegibility;
        text-transform: none;
        -moz-osx-font-smoothing: grayscale;
        -webkit-font-smoothing: antialiased;
        font-smoothing: antialiased;
        content: "#{$default-state}";
    }
}
@mixin icon-self($default-state) {
    display: inline-block;
    font-family: "Metronic";
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    line-height: 0px;
    text-decoration: inherit;
    text-rendering: optimizeLegibility;
    text-transform: none;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-smoothing: antialiased;
    content: "#{$default-state}";
}
@mixin la-icon($icon) {
    font-family: "LineAwesome";
    text-decoration: inherit;
    text-rendering: optimizeLegibility;
    text-transform: none;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-smoothing: antialiased;
    &:before {
        content: "#{$icon}";
    }
}
@mixin la-icon-self($icon) {
    font-family: "LineAwesome";
    text-decoration: inherit;
    text-rendering: optimizeLegibility;
    text-transform: none;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-smoothing: antialiased;
    content: "#{$icon}";
}
@mixin m-generate-close-icon($self:null) {
    @if $self == true {
        @include la-icon-self('\f191');
    } @else {
        @include la-icon('\f191');
    }
}
@mixin m-generate-arrow-down-icon($self:null) {
    @if $self == true {
        @include la-icon-self('\f110');
    } @else {
        @include la-icon('\f110');
    }
}
